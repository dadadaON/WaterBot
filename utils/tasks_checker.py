import asyncio
from datetime import datetime
from sqlalchemy import select

from utils.google_tasks import GoogleTasksManager
from models.tasks import CheckedTask
from models.database import async_session
from utils.logger import logger

class TasksChecker:
    def __init__(self, bot):
        self.bot = bot
        self.tasks_manager = GoogleTasksManager()
        self.check_interval = 300  # 5 —Ö–≤–∏–ª–∏–Ω

    async def get_new_tasks(self):
        """–û—Ç—Ä–∏–º—É—î –Ω–æ–≤—ñ –∑–∞–≤–¥–∞–Ω–Ω—è, —è–∫—ñ —â–µ –Ω–µ –±—É–ª–∏ –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω—ñ"""
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –∑–∞–≤–¥–∞–Ω–Ω—è –∑ Google Tasks
            all_tasks = await self.tasks_manager.list_tasks()
            
            async with async_session() as session:
                # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω—ñ task_id –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
                result = await session.execute(select(CheckedTask.task_id))
                checked_task_ids = {row[0] for row in result}
                
                # –§—ñ–ª—å—Ç—Ä—É—î–º–æ –Ω–æ–≤—ñ –∑–∞–≤–¥–∞–Ω–Ω—è
                new_tasks = [
                    task for task in all_tasks 
                    if task['id'] not in checked_task_ids
                ]
                
                # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–æ–≤—ñ –∑–∞–≤–¥–∞–Ω–Ω—è —è–∫ –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω—ñ
                for task in new_tasks:
                    checked_task = CheckedTask(task_id=task['id'])
                    session.add(checked_task)
                
                await session.commit()
                
                return new_tasks
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –Ω–æ–≤–∏—Ö –∑–∞–≤–¥–∞–Ω—å: {e}")
            return []

    async def notify_about_new_tasks(self, tasks):
        """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –Ω–æ–≤—ñ –∑–∞–≤–¥–∞–Ω–Ω—è"""
        if not tasks:
            return

        message = "üìã –ù–æ–≤—ñ –∑–∞–≤–¥–∞–Ω–Ω—è:\n\n"
        for task in tasks:
            message += f"‚Ä¢ {task['title']}\n"
            if task.get('notes'):
                message += f"  –î–µ—Ç–∞–ª—ñ: {task['notes']}\n"
            message += "\n"

        # TODO: –ó–∞–º—ñ–Ω—ñ—Ç—å ADMIN_CHAT_ID –Ω–∞ —Ä–µ–∞–ª—å–Ω–∏–π ID —á–∞—Ç—É –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        try:
            await self.bot.send_message(chat_id=ADMIN_CHAT_ID, text=message)
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è: {e}")

    async def check_loop(self):
        """–ì–æ–ª–æ–≤–Ω–∏–π —Ü–∏–∫–ª –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∑–∞–≤–¥–∞–Ω—å"""
        while True:
            try:
                new_tasks = await self.get_new_tasks()
                if new_tasks:
                    await self.notify_about_new_tasks(new_tasks)
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ —Ü–∏–∫–ª—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏: {e}")
            
            await asyncio.sleep(self.check_interval) 