from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from datetime import datetime
import asyncio
from aiogram.types import CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
import html # –î–æ–¥–∞—î–º–æ —ñ–º–ø–æ—Ä—Ç –¥–ª—è —Å–∞–Ω—ñ—Ç–∏–∑–∞—Ü—ñ—ó

from utils.google_tasks import GoogleTasksManager
from utils.excel_sync import ExcelSync
from utils.logger import logger
from models.database import get_session
from models.request import ServiceRequest
from config import NOTIFICATION_GROUP_ID, ADMINS

router = Router()
tasks_manager = GoogleTasksManager()
excel_sync = ExcelSync()

# –î–æ–¥–∞–π—Ç–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∏ –¥–ª—è –Ω–∞–∑–≤ —Å–ø–∏—Å–∫—ñ–≤ –Ω–∞ –ø–æ—á–∞—Ç–∫—É —Ñ–∞–π–ª—É
TASK_LISTS = {
    'install': '–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è',
    'maintenance': '–¢–µ—Ö–æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è',
    'repair': '–†–µ–º–æ–Ω—Ç –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è',
    'question': '–ü–∏—Ç–∞–Ω–Ω—è'
}

# –û–Ω–æ–≤–ª—é—î–º–æ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
SERVICES = {
    'install': 'üîß –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è',
    'maintenance': 'üîÑ –¢–µ—Ö–æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è',
    'repair': 'üõ† –†–µ–º–æ–Ω—Ç –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è',
    'question': '‚ùì –ó–∞–¥–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è'
}

# –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
CONTACT_PHONE = "@Complete_System"
CONTACT_EMAIL = ""
CONTACT_ADDRESS = ""
CONTACT_NUMBER = "+390738390983"

class TaskStates(StatesGroup):
    waiting_for_service_type = State()
    waiting_for_full_name = State()
    waiting_for_phone = State()
    waiting_for_settlement = State()
    waiting_for_street = State()
    waiting_for_building = State()
    waiting_for_apartment = State()
    waiting_for_question = State()
    waiting_for_confirmation = State()

def get_services_keyboard() -> InlineKeyboardMarkup:
    """–°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ—Å–ª—É–≥"""
    builder = InlineKeyboardBuilder()
    for service_id, service_name in SERVICES.items():
        builder.button(text=service_name, callback_data=f"service:{service_id}")
    builder.button(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞—è–≤–∫—É", callback_data="cancel")
    builder.adjust(1)  # –ü–æ –æ–¥–Ω—ñ–π –∫–Ω–æ–ø—Ü—ñ –≤ —Ä—è–¥–∫—É
    return builder.as_markup()

def get_confirm_keyboard() -> InlineKeyboardMarkup:
    """–°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è"""
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data="confirm:yes")
    builder.button(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="confirm:no")
    builder.adjust(2)
    return builder.as_markup()

# –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
def get_main_keyboard() -> ReplyKeyboardMarkup:
    """–°—Ç–≤–æ—Ä—é—î –≥–æ–ª–æ–≤–Ω—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É"""
    keyboard = [
        [KeyboardButton(text="üìù –°—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞—è–≤–∫—É")],
        [KeyboardButton(text="‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è"), KeyboardButton(text="üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏")]
    ]
    return ReplyKeyboardMarkup(
        keyboard=keyboard,
        resize_keyboard=True
    )

@router.message(Command("start"))
async def cmd_start(message: Message):
    # –°–ø–æ—á–∞—Ç–∫—É –ø–æ–∫–∞–∑—É—î–º–æ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
    await message.answer(
        "üëã –í—ñ—Ç–∞—é!\n"
        "–Ø –¥–æ–ø–æ–º–æ–∂—É –≤–∞–º –æ—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞—è–≤–∫—É –Ω–∞ –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è.",
        reply_markup=get_main_keyboard()
    )

@router.message(F.text == "üìù –°—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞—è–≤–∫—É")
async def handle_create_request(message: Message):
    await message.answer(
        "üìù –û–±–µ—Ä—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —Ç–∏–ø –ø–æ—Å–ª—É–≥–∏:",
        reply_markup=get_services_keyboard()
    )

@router.message(F.text == "‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è")
async def handle_info(message: Message):
    await message.answer(
        "‚ÑπÔ∏è –ü—Ä–æ –Ω–∞—Å:\n\n"
        "–ú–∏ –Ω–∞–¥–∞—î–º–æ –ø–æ—Å–ª—É–≥–∏ –∑ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–∞ –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è.\n"
        "–ü—Ä–∞—Ü—é—î–º–æ —â–æ–¥–Ω—è –∑ 9:00 –¥–æ 18:00."
    )

@router.message(F.text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏")
async def handle_contacts(message: Message):
    await message.answer(
        "üìû –ù–∞—à—ñ –∫–æ–Ω—Ç–∞–∫—Ç–∏:\n\n"
        f"üë§ {CONTACT_PHONE}\n"
        f"üì± {CONTACT_NUMBER}"
    )

@router.callback_query(lambda c: c.data == "cancel")
async def process_cancel(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(
        "‚ùå –ó–∞–ø–∏—Å —Å–∫–∞—Å–æ–≤–∞–Ω–æ.\n"
        "–©–æ–± –ø–æ—á–∞—Ç–∏ —Å–ø–æ—á–∞—Ç–∫—É, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /start"
    )
    await callback.answer()

@router.callback_query(lambda c: c.data.startswith('service:'))
async def process_service_selection(callback: CallbackQuery, state: FSMContext):
    try:
        service_id = callback.data.split(':')[1]
        logger.info(f"Selected service: {service_id}")
        
        await state.update_data(service_type=service_id)
        logger.debug(f"State updated with service_type: {service_id}")
        
        # –†—ñ–∑–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤ –ø–æ—Å–ª—É–≥
        if service_id == 'question':
            await callback.message.edit_text(
                "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è:"
            )
        else:
            await callback.message.edit_text(
                f"–í–∏ –æ–±—Ä–∞–ª–∏: {SERVICES[service_id]}\n"
                "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è:"
            )
        await state.set_state(TaskStates.waiting_for_full_name)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error processing service selection: {str(e)}")
        await callback.message.edit_text(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ –ø–æ—Å–ª—É–≥–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:",
            reply_markup=get_services_keyboard()
        )
        await callback.answer()

@router.message(TaskStates.waiting_for_full_name)
async def process_full_name(message: Message, state: FSMContext):
    # –í–∞–ª—ñ–¥–∞—Ü—ñ—è —ñ–º–µ–Ω—ñ (–ø—Ä–∏–∫–ª–∞–¥ –ø—Ä–æ—Å—Ç–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏)
    if not all(x.isalpha() or x.isspace() for x in message.text):
        await message.answer(
            "‚ùå –Ü–º'—è –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ –ª–∏—à–µ –ª—ñ—Ç–µ—Ä–∏ —Ç–∞ –ø—Ä–æ–±—ñ–ª–∏.\n"
            "–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:"
        )
        return
    
    await state.update_data(full_name=message.text)
    await state.set_state(TaskStates.waiting_for_phone)
    await message.answer(
        "–í–≤–µ–¥—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n"
        "(___) ___-__-__"
    )

@router.message(TaskStates.waiting_for_phone)
async def process_phone(message: Message, state: FSMContext):
    # –í–∞–ª—ñ–¥–∞—Ü—ñ—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É
    phone = message.text.strip()
    digits = ''.join(filter(str.isdigit, phone))
    
    if len(digits) != 10:
        await message.answer(
            "‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É.\n"
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —É —Ñ–æ—Ä–º–∞—Ç—ñ (___) ___-__-__"
        )
        return
    
    formatted_phone = f"({digits[:3]}) {digits[3:6]}-{digits[6:8]}-{digits[8:]}"
    await state.update_data(phone=formatted_phone)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–∏–ø –ø–æ—Å–ª—É–≥–∏
    data = await state.get_data()
    if data['service_type'] == 'question':
        await state.set_state(TaskStates.waiting_for_question)
        await message.answer("–û–ø–∏—à—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è:")
    else:
        await state.set_state(TaskStates.waiting_for_settlement)
        await message.answer("–í–≤–µ–¥—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–∑–≤—É –Ω–∞—Å–µ–ª–µ–Ω–æ–≥–æ –ø—É–Ω–∫—Ç—É:")

@router.message(TaskStates.waiting_for_settlement)
async def process_settlement(message: Message, state: FSMContext):
    settlement = message.text.strip()
    if not settlement:
        await message.answer(
            "‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –Ω–∞—Å–µ–ª–µ–Ω–æ–≥–æ –ø—É–Ω–∫—Ç—É:"
        )
        return
    
    await state.update_data(settlement=settlement)
    await state.set_state(TaskStates.waiting_for_street)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–∑–≤—É –≤—É–ª–∏—Ü—ñ:")

@router.message(TaskStates.waiting_for_street)
async def process_street(message: Message, state: FSMContext):
    street = message.text.strip()
    if len(street) < 2:
        await message.answer(
            "‚ùå –ù–∞–∑–≤–∞ –≤—É–ª–∏—Ü—ñ –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∞.\n"
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É –Ω–∞–∑–≤—É –≤—É–ª–∏—Ü—ñ:"
        )
        return
    
    await state.update_data(street=street)
    await state.set_state(TaskStates.waiting_for_building)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –Ω–æ–º–µ—Ä –±—É–¥–∏–Ω–∫—É:")

@router.message(TaskStates.waiting_for_building)
async def process_building(message: Message, state: FSMContext):
    building = message.text.strip()
    if not building:
        await message.answer(
            "‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –±—É–¥–∏–Ω–∫—É:"
        )
        return
    
    await state.update_data(building=building)
    await state.set_state(TaskStates.waiting_for_apartment)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä–∏:")

@router.message(TaskStates.waiting_for_apartment)
async def process_apartment(message: Message, state: FSMContext):
    apartment = message.text.strip()
    if not apartment:
        await message.answer(
            "‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä–∏:"
        )
        return
    
    data = await state.get_data()
    
    # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤–Ω—É –∞–¥—Ä–µ—Å—É –∑ –∫–≤–∞—Ä—Ç–∏—Ä–æ—é
    address = f"–≤—É–ª. {data['street']}, –±—É–¥. {data['building']}, –∫–≤. {apartment}"
    await state.update_data(address=address)
    
    # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
    confirmation_text = (
        "üìã –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, –±—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥–µ–Ω—ñ –¥–∞–Ω—ñ:\n\n"
        f"–ü–æ—Å–ª—É–≥–∞: {SERVICES[data['service_type']]}\n"
        f"–Ü–º'—è: {data['full_name']}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
        f"–ù–∞—Å–µ–ª–µ–Ω–∏–π –ø—É–Ω–∫—Ç: {data['settlement']}\n"
        f"–ê–¥—Ä–µ—Å–∞: {address}\n\n"
        "–í—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ?"
    )
    
    await state.set_state(TaskStates.waiting_for_confirmation)
    await message.answer(confirmation_text, reply_markup=get_confirm_keyboard())

@router.message(Command("help"))
async def cmd_help(message: Message):
    # –ë–∞–∑–æ–≤–∞ –¥–æ–≤—ñ–¥–∫–∞ –¥–ª—è –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    help_text = (
        "üîç –î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n\n"
        "/start - –ü–æ—á–∞—Ç–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏\n"
        "/cancel - –°–∫–∞—Å—É–≤–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—É –¥—ñ—é\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è\n"
    )
    
    # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –∫–æ–º–∞–Ω–¥–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤
    if str(message.from_user.id) in ADMINS:
        help_text += (
            "\nüëë –ö–æ–º–∞–Ω–¥–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n"
            "/sync - –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É–≤–∞—Ç–∏ –¥–∞–Ω—ñ –∑ Excel\n"
            "/test - –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ Google Tasks\n"
        )
    
    help_text += (
        "\n–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /start "
        "—Ç–∞ –¥–æ—Ç—Ä–∏–º—É–π—Ç–µ—Å—å —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π."
    )
    
    await message.answer(help_text)

@router.message(Command("test"))
async def cmd_test(message: Message):
    try:
        logger.info("Testing Google Tasks connection")
        result = await tasks_manager.test_connection()
        if result:
            await message.answer("–ó'—î–¥–Ω–∞–Ω–Ω—è –∑ Google Tasks —É—Å–ø—ñ—à–Ω–µ!")
        else:
            await message.answer("–ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ Google Tasks")
    except Exception as e:
        logger.error(f"Test command error: {str(e)}")
        await message.answer("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—ñ –∑'—î–¥–Ω–∞–Ω–Ω—è")

@router.message(Command("cancel"))
async def cmd_cancel(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "üîÑ –î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –û–±–µ—Ä—ñ—Ç—å –ø–æ—Å–ª—É–≥—É:",
        reply_markup=get_services_keyboard()
    )

async def get_or_create_task_list(list_name: str) -> str:
    """–û—Ç—Ä–∏–º—É—î ID —Å–ø–∏—Å–∫—É –∑–∞–≤–¥–∞–Ω—å –∞–±–æ —Å—Ç–≤–æ—Ä—é—î –Ω–æ–≤–∏–π"""
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Å–µ—Ä–≤—ñ—Å —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π
        if not tasks_manager.service:
            logger.info("Authenticating Google Tasks before creating task list")
            await tasks_manager.authenticate()
            
        # –°–ø—Ä–æ–±—É—î–º–æ –∑–Ω–∞–π—Ç–∏ —ñ—Å–Ω—É—é—á–∏–π —Å–ø–∏—Å–æ–∫
        loop = asyncio.get_event_loop()
        lists = await loop.run_in_executor(
            None, 
            tasks_manager.service.tasklists().list().execute
        )
        
        # –®—É–∫–∞—î–º–æ —Å–ø–∏—Å–æ–∫ –∑–∞ –Ω–∞–∑–≤–æ—é
        for task_list in lists.get('items', []):
            if task_list['title'] == list_name:
                return task_list['id']
        
        # –Ø–∫—â–æ —Å–ø–∏—Å–æ–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π
        new_list = await tasks_manager.create_task_list(list_name)
        return new_list['id']
    except Exception as e:
        logger.error(f"Error getting/creating task list: {str(e)}")
        raise

@router.callback_query(lambda c: c.data.startswith('confirm:'))
async def process_confirmation_callback(callback: CallbackQuery, state: FSMContext):
    try:
        confirmation = callback.data.split(':')[1]
        data = await state.get_data()
        
        if confirmation == 'yes':
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—é –ø–µ—Ä–µ–¥ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è–º –∑–∞–≤–¥–∞–Ω–Ω—è
            if not tasks_manager.service:
                logger.info("Authenticating Google Tasks before creating task")
                await tasks_manager.authenticate()
                
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –≤—Å—ñ—Ö –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö –ø–æ–ª—ñ–≤
            required_fields = ['full_name', 'phone', 'service_type']
            if data['service_type'] != 'question':
                required_fields.append('settlement')
                
            for field in required_fields:
                if field not in data:
                    raise ValueError(f"Missing required field: {field}")
                
            # –û—Ç—Ä–∏–º—É—î–º–æ –∞–±–æ —Å—Ç–≤–æ—Ä—é—î–º–æ —Å–ø–∏—Å–æ–∫ –∑–∞–≤–¥–∞–Ω—å
            list_name = TASK_LISTS.get(data['service_type'])
            list_id = await get_or_create_task_list(list_name)
            
            # –§–æ—Ä–º—É—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞ –æ–ø–∏—Å –∑–∞–≤–¥–∞–Ω–Ω—è
            title = f"{SERVICES[data['service_type']]} - {data['full_name']}"
            notes = f"–Ü–º'—è: {data['full_name']}\n"
            notes += f"–¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
            
            if data['service_type'] == 'question':
                notes += f"–ü–∏—Ç–∞–Ω–Ω—è: {data['question']}"
            else:
                if 'settlement' in data:
                    notes += f"–ù–∞—Å–µ–ª–µ–Ω–∏–π –ø—É–Ω–∫—Ç: {data['settlement']}\n"
                if 'address' in data:
                    notes += f"–ê–¥—Ä–µ—Å–∞: {data['address']}"
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–≤–¥–∞–Ω–Ω—è
            try:
                task = await tasks_manager.create_task(list_id, title, notes)
                if task:
                    logger.info(f"Task created successfully: {task.get('id')}")
                    
                    # --- –ü–æ—á–∞—Ç–æ–∫: –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è ---
                    try:
                        # –°–∞–Ω—ñ—Ç–∏–∑—É—î–º–æ –Ω–∞–∑–≤—É –∑–∞–≤–¥–∞–Ω–Ω—è –ø–µ—Ä–µ–¥ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è–º
                        sanitized_title = html.escape(title) 
                        notification_text = f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è: {sanitized_title}"
                        
                        await callback.bot.send_message(
                            chat_id=NOTIFICATION_GROUP_ID,
                            text=notification_text,
                            parse_mode=None  # –ù–∞–¥—Å–∏–ª–∞—î–º–æ —è–∫ –∑–≤–∏—á–∞–π–Ω–∏–π —Ç–µ–∫—Å—Ç
                        )
                        logger.info(f"Sent notification for task '{task.get('id')}' to group {NOTIFICATION_GROUP_ID}")
                    except Exception as notify_e:
                        logger.error(f"Failed to send notification to group {NOTIFICATION_GROUP_ID}: {notify_e}")
                    # --- –ö—ñ–Ω–µ—Ü—å: –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è ---

                    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–∞–ø–∏—Ç –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
                    async with get_session() as session:
                        new_request = ServiceRequest(
                            full_name=data['full_name'],
                            phone=data['phone'],
                            service_type=data['service_type'],
                            settlement=data['settlement']
                        )
                        
                        if data['service_type'] == 'question':
                            new_request.question = data['question']
                        else:
                            new_request.address = data['address']
                            
                        session.add(new_request)
                        await session.commit()
                    
                    await callback.message.edit_text(
                        f"‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ {SERVICES[data['service_type']]} –ø—Ä–∏–π–Ω—è—Ç–∞!\n"
                        "–ú–∏ –∑–≤'—è–∂–µ–º–æ—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º."
                    )
                    await state.clear()
                else:
                    await callback.message.edit_text(
                        "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:",
                        reply_markup=get_services_keyboard()
                    )
                    await state.clear()
            except Exception as e:
                logger.error(f"Error creating task: {str(e)}")
                await callback.message.edit_text(
                    "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:",
                    reply_markup=get_services_keyboard()
                )
                await state.clear()
                
        elif confirmation == 'no':
            await callback.message.edit_text(
                "‚ùå –ó–∞—è–≤–∫—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ.\n"
                "–©–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É –∑–∞—è–≤–∫—É, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /start"
            )
            await state.clear()
            
        # –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –Ω–∞ callback
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error processing confirmation callback: {str(e)}")
        logger.exception("Full error traceback:")
        await callback.message.edit_text(
            "‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:",
            reply_markup=get_services_keyboard()
        )
        await state.clear()
        await callback.answer()

@router.callback_query(lambda c: c.data == "action:create")
async def create_request(callback: CallbackQuery):
    await cmd_start(callback.message)
    await callback.answer()

@router.callback_query(lambda c: c.data == "action:info")
async def show_info(callback: CallbackQuery):
    await callback.message.answer(
        "üìû –ù–∞—à—ñ –∫–æ–Ω—Ç–∞–∫—Ç–∏:\n\n"
        f"üë§ {CONTACT_PHONE}"
    )
    await callback.answer()

@router.callback_query(lambda c: c.data == "action:contacts")
async def show_contacts(callback: CallbackQuery):
    await callback.message.answer(
        "üìû –ù–∞—à—ñ –∫–æ–Ω—Ç–∞–∫—Ç–∏:\n\n"
        f"üë§ {CONTACT_PHONE}\n"
        f"üì± {CONTACT_NUMBER}"
    )
    await callback.answer()

@router.message(TaskStates.waiting_for_question)
async def process_question(message: Message, state: FSMContext):
    data = await state.get_data()
    
    # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
    confirmation_text = (
        "üìã –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, –±—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥–µ–Ω—ñ –¥–∞–Ω—ñ:\n\n"
        f"–ü–æ—Å–ª—É–≥–∞: {SERVICES[data['service_type']]}\n"
        f"–Ü–º'—è: {data['full_name']}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
        f"–ü–∏—Ç–∞–Ω–Ω—è: {message.text}\n\n"
        "–í—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ?"
    )
    
    await state.update_data(question=message.text)
    await state.set_state(TaskStates.waiting_for_confirmation)
    await message.answer(confirmation_text, reply_markup=get_confirm_keyboard())

@router.message(Command("sync"))
async def cmd_sync(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä—É—á–Ω–æ—ó —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –∑ Excel"""
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if str(message.from_user.id) not in ADMINS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return
        
    try:
        # –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ—á–∞—Ç–æ–∫ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó
        status_message = await message.answer("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∑ Excel...")
        
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é
        if await excel_sync.export_to_excel():
            await status_message.edit_text("‚úÖ –î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ –≤ Excel!")
        else:
            await status_message.edit_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –µ–∫—Å–ø–æ—Ä—Ç—ñ –¥–∞–Ω–∏—Ö.")
    except Exception as e:
        logger.error(f"Error in sync command: {str(e)}")
        await message.answer("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó.") 